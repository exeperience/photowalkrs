from PhotoWalkr import settings
from models import PhotoWalk, PhotoWalkStats
from functions import create_photowalk
from django.shortcuts import render_to_response
from django.http import HttpResponseRedirect, HttpResponse
from django.core.paginator import Paginator, EmptyPage, InvalidPage
from forms import PhotoWalkForm
from django.template import RequestContext
from PhotoWalkr.apps.profiles.models import UserProfile, GroupProfile
from PhotoWalkr.apps.photos.models import Photo

def ViewPhotoWalk(request, id):
    photowalk = PhotoWalk.objects.get(id=2)
    photowalk.users = UserProfile.objects.filter(user__in=photowalk.participants.all())
    return render_to_response("pw-profile.html", {'photowalk':photowalk, 'STATIC_URL': settings.STATIC_URL, 'MEDIA_URL':settings.MEDIA_URL}, RequestContext(request))

def PhotoWalksAll(request):
    photowalk_list = PhotoWalk.objects.all()
    overflow = 0
    for photowalk in photowalk_list:
        participants = photowalk.participants.all()
        users = []
        u_photos = []
        i=1
        for user in participants:
                if i is 10:
                        overflow = 1
                        break
                u = UserProfile.objects.get(user=user)
                u.i = i
                #Add top photo of each user here
                u_photos = Photo.objects.filter(album__photowalk=photowalk, user = u)
                if len(u_photos) is 0:
                        continue
                u.photo = u_photos[0]
                users.append(u)
                i+=1
        photowalk.users = users      

    paginator = Paginator(photowalk_list, 100)
    try:
        page = int(request.GET.get('page', '1'))
    except ValueError:
        page = 1
    try:
        photowalks = paginator.page(page)
    except (EmptyPage, InvalidPage):
        photowalks = paginator.page(paginator.num_pages)
        
    return render_to_response('photow.html', {"photowalks": photowalks, "overflow":overflow , 'MEDIA_URL':settings.MEDIA_URL, 'STATIC_URL': settings.STATIC_URL,}, RequestContext(request))

def PhotoWalkTabs(request, pwid=0,  tabid=0, uid=0):
    if tabid == "2":
        user = UserProfile()
        user.id = 0
        return render_to_response('pw-tab3.html', { 'pwid':pwid, 'user':user}, RequestContext(request))
    if tabid == "3":
        return render_to_response('pw-tab4.html', { 'pwid':pwid,}, RequestContext(request))
    if tabid == "6":
        photowalk = PhotoWalk.objects.get(id=pwid)
        photowalk.memcount = len(photowalk.participants.all())
        return render_to_response('pw-tab6.html', { 'photowalk':photowalk,}, RequestContext(request))

def PhotoWalkPhotos(request, pwid=0, uid=0):
    user = UserProfile.objects.get(id=uid)
    return render_to_response('pw-tab3.html', {'pwid':pwid, 'user':user,}, RequestContext(request))

def CreatePhotoWalk(request):
    if request.method == 'POST':
        request.POST["adminid"] = request.user.id
        create_photowalk(request.POST)
        return HttpResponseRedirect("/photowalks/create")
    return render_to_response("createPw.html", {'STATIC_URL': settings.STATIC_URL}, RequestContext(request))

def PhotoWalkList(request, gid="-1", type="none"):
    photowalk_list = PhotoWalk.objects.filter(group = GroupProfile.objects.get(id=gid))
    overflow = 0
    for photowalk in photowalk_list:
        participants = photowalk.participants.all()
        users = []
        u_photos = []
        i=1
        for user in participants:
                if i is 10:
                        overflow = 1
                        break
                u = UserProfile.objects.get(user=user)
                u.i = i
                u_photos = Photo.objects.filter(album__photowalk=photowalk, user = u)
                if len(u_photos) is 0:
                        continue
                u.photo = u_photos[0]
                users.append(u)
                i+=1
        photowalk.users = users      

    paginator = Paginator(photowalk_list, 100)
    try:
        page = int(request.GET.get('page', '1'))
    except ValueError:
        page = 1
    try:
        photowalks = paginator.page(page)
    except (EmptyPage, InvalidPage):
        photowalks = paginator.page(paginator.num_pages)
        
    return render_to_response('pwgen.html', {"photowalks": photowalks, "overflow":overflow , 'MEDIA_URL':settings.MEDIA_URL, 'STATIC_URL': settings.STATIC_URL,}, RequestContext(request))
