from django.contrib.gis.db import models
from django.contrib.auth.models import User
from PhotoWalkr.settings import SRID
from tagging.fields import TagField
from sorl.thumbnail import ImageField
import datetime

PRIVACY_CHOICES = (
    ('public', 'Public'),
    ('private', 'Private')
)

"""created for each photo"""
class Stats(models.Model):
    """to be generated by a function"""
    score = models.IntegerField(default=0, blank=True)
    likes = models.IntegerField(default=0, blank=True)
    liked_by = models.ManyToManyField(User, blank=True, null=True)
    views = models.IntegerField(default=0, blank=True)
    is_photowalks = models.BooleanField(default=False)

class PhotoInfo(models.Model):
    camera = models.CharField(max_length=30, blank=True, null=True, default="N/A")
    taken = models.DateField(default=datetime.datetime.now(), blank=True, null=True)
    category = models.CharField(max_length=30, blank=True, null=True, default="N/A")
    iso = models.CharField(max_length=30, blank=True, null=True, default="N/A")
    aperture = models.CharField(max_length=30, blank=True, null=True, default="N/A")
    focallength = models.CharField(max_length=30, blank=True, null=True, default="N/A")
    shutterspeed = models.CharField(max_length=30, blank=True, null=True, default="N/A")

class Photo(models.Model):
    photo = ImageField(upload_to="photos/photos/")
    privacy = models.CharField(choices = PRIVACY_CHOICES, max_length=30)
    notification_enabled = models.BooleanField(default=True)
    title = models.CharField(max_length=30)
    user = models.ForeignKey(User)
    description = models.TextField()
    #location = models.PointField(srid=SRID, blank=True)
    create_time = models.DateTimeField(auto_now_add=True)
    update_time = models.DateTimeField(auto_now=True)
    tags = TagField()
    objects = models.GeoManager()
    stats = models.ForeignKey(Stats, null=True, blank=True)
    info = models.ForeignKey(PhotoInfo, null=True, blank=True)
    def __unicode__(self):
        return self.title

class Album(models.Model):
    name = models.CharField(max_length=30)
    photos = models.ManyToManyField(Photo, blank=True, null=True)
    user = models.ForeignKey(User)
    is_photowalk_album = models.BooleanField(default=False)
    privacy = models.CharField(choices = PRIVACY_CHOICES, max_length=30)
    group = models.ForeignKey('profiles.GroupProfile', blank=True, null=True)
    create_time = models.DateTimeField(auto_now_add=True)
    update_time = models.DateTimeField(auto_now=True)
    tags = TagField()
    def __unicode__(self):
        return self.name


